#!/usr/bin/env node
var simplesmtp = require("simplesmtp")
	, p = require("commander")
	, log = require('nodeutil').simplelog
  , uuid = require('node-uuid')
  , ver = '0.0.2'
  , fs = require("fs")
  , os = require("os")
  , _ = require("underscore")
	, MailParser = require("mailparser").MailParser
	, mailparser = new MailParser();

p.version(ver)
  .option('-u, --username <sendgrid user name>', 'Specific the sendgrid username for login')
  .option('-p, --password <sendgrid password>', 'Specific the sendgrid password for login')
  .option('-P, --port <smtp port>', 'Specific the smtp port for connect')
  .option('-t, --tmp <tmp file location>', 'We will save the content to file in the tmp path')
  .option('-s, --service <smtp provider>', 'Specific the smtp service provider for connect')
  .option('-c, --campaignid <campaign_id>', 'Specific the campaign_id for mail category')
  .parse(process.argv);

var mailer = ( p.service == 'mimail' ? 
	require('../lib/mimailapi') : require('../lib/sendgridapi') );

if(!p.username || !p.password || !p.tmp) {
  log.error('init server error, please check using "-h" to check...');
	process.exit(1);
} else {
	mailer.init(p.username, p.password, p.campaignid || 'smtp2sendgrid-using-mimail');
}

var smtp = simplesmtp.createServer();
smtp.listen(p.port || 25, function(err){
  if(err)
		console.log('SMTP start error:', err);
  else
    console.log('SMTP server started in port %s', p.port || 25);
});

smtp.on("startData", function(connection){
	  var data_id = uuid.v1();
    console.log("Message from:", connection.from);
    console.log("Message to:", connection.to);
    console.log("Message:", connection);
		//connection.mailid = data_id;
		connection.simplesmtp = {
			mailid: data_id,
			to: connection.to
	  }
    connection.saveStream = fs.createWriteStream(getPath(p.tmp, data_id));
});

smtp.on("data", function(connection, chunk){
    connection.saveStream.write(chunk);
});

smtp.on("dataReady", function(connection, callback){
    connection.saveStream.end(function(){
      log.info('Processing mailid:%s', connection.simplesmtp.mailid);
			sendmail({
				from: connection.from,
				to: connection.simplesmtp.to,
				mailid: connection.simplesmtp.mailid
			}, function(err, doc){
				if(err) 
					log.error('send mail error....');
				else
					log.info('send mail success, result:', doc);
			});
		});

    callback(null, connection.emailid); // ABC1 is the queue id to be advertised to the client
});

function getPath(folderStr, filename) {
  if(folderStr.endsWith('/'))
		return folderStr + filename + '.txt';
	else
		return folderStr + '/' + filename + '.txt';
}

//function sendmail(from, to, mailid, cb) {
function sendmail(opt, cb) {
  var from = opt.from;
  var to = opt.to;
  var mailid = opt.mailid;
	var mailtxt = fs.readFileSync(getPath(p.tmp, mailid), "utf8");
  parseMailTxt(mailtxt, function(mailobj){

		var opts = mailobj;
		if(mailobj['cc']) opts['cc'] = formatArr(mailobj['cc']);
		if(mailobj['bcc']) opts['bcc'] = formatArr(mailobj['bcc']);

	log.info('ori[%s]:', typeof(to), to);
	log.info('to[%s]:', typeof(mailobj.to), mailobj.to);
	log.info('cc:[%s]', typeof(mailobj.cc), mailobj.cc);

		opts.bcc =  _.difference(to, formatArr(mailobj.to));
	log.info('1.Got bcc:', opts.bcc);
		if(mailobj.cc)
			opts.bcc = _.difference(opts.bcc, formatArr(mailobj.cc));
	log.info('2.Got bcc:', opts.bcc);

	log.trace('BCC:', opts.bcc);
		
		if(opts.bcc && opts.bcc.length == 0) {
			delete opts.bcc
		}

		log.trace('Send mail body:', opts);

		mailer.sendmail(opts, function(err, res){
			if(err) {
				console.log('send mail from sendgrid error:', err);
			}
			cb(err, res);
		});
	});
}

function parseMailTxt(txt, callback) {
	var obj = {};
	mailparser.on("end", function(mail_object){
		console.log("From:", mail_object.from);
		obj.from = mail_object.from[0].address;
		console.log("To:", mail_object.to);
		obj.to = [];
		for(var i=0; i<mail_object.to.length; i++){
			obj.to[i] = mail_object.to[i].address;
		}
		if(mail_object.cc){
			obj.cc = [];
			for(var i=0; i<mail_object.cc.length; i++){
				obj.cc[i] = mail_object.cc[i].address;
			}
		}
		if(mail_object.bcc){
			obj.bcc = [];
			for(var i=0; i<mail_object.bcc.length; i++){
				obj.bcc[i] = mail_object.bcc[i].address;
			}
		}
		console.log("Subject:", mail_object.subject);
		obj.subject = mail_object.subject;
		if(mail_object.text){
			obj.text = mail_object.text;
		}
		if(mail_object.html){
			obj.html = mail_object.html;
		}
		if(mail_object.attachments){
			obj.files = [];
			for(var i=0; i<mail_object.attachments.length; i++){
				obj.files[i] = {};
				obj.files[i].filename = mail_object.attachments[i].fileName;
				obj.files[i].contentType = mail_object.attachments[i].contentType;
				obj.files[i].content = mail_object.attachments[i].content;
			}
		}
		log.debug(obj);
		callback(obj);
	});
	mailparser.write(txt);
	mailparser.end();
}

function nameParser(key, txt) {
  var obj = {};
	if(txt.startsWith(key) && txt.indexOf('<') > 0) {
		if(txt.startsWith(key)) 
			obj.mail = txt.split(': ')[1].split(' ')[1].replace(/</,'').replace(/>/,'');
		if(txt.startsWith(key)) 
			obj.name = txt.split(': ')[1].split(' ')[0].replace(/\"/,'').replace(/\"/,'');
	} else {
		if(txt.startsWith(key)) obj.mail = txt.split(': ')[1];
	}
  return obj;
}

function formatArr(txt) {
  if(typeof(txt) == 'object') return txt;
	return _.map(txt.split(','), function(v){
		return v.trim();
	});
}

