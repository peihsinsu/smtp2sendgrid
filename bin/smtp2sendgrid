#!/usr/bin/env node
var simplesmtp = require("simplesmtp")
	, p = require("commander")
	, log = require('nodeutil').simplelog
  , uuid = require('node-uuid')
  , ver = '0.0.2'
  , fs = require("fs")
  , os = require("os")
  , _ = require("underscore")
	, mailer = require('../lib/sendgridapi');

p.version(ver)
  .option('-u, --username <sendgrid user name>', 'Specific the sendgrid username for login')
  .option('-p, --password <sendgrid password>', 'Specific the sendgrid password for login')
  .option('-P, --port <smtp port>', 'Specific the smtp port for connect')
  .option('-t, --tmp <tmp file location>', 'We will save the content to file in the tmp path')
  .parse(process.argv);

if(!p.username || !p.password || !p.tmp) {
  log.error('init server error, please check using "-h" to check...');
	process.exit(1);
} else {
	mailer.init(p.username, p.password);
}

var smtp = simplesmtp.createServer();
smtp.listen(p.port || 25, function(err){
  if(err)
		console.log('SMTP start error:', err);
  else
    console.log('SMTP server started in port %s', p.port || 25);
});

smtp.on("startData", function(connection){
	  var data_id = uuid.v1();
    console.log("Message from:", connection.from);
    console.log("Message to:", connection.to);
		//connection.mailid = data_id;
		connection.simplesmtp = {
			mailid: data_id,
			to: connection.to
	  }
    connection.saveStream = fs.createWriteStream(getPath(p.tmp, data_id));
});

smtp.on("data", function(connection, chunk){
    connection.saveStream.write(chunk);
});

smtp.on("dataReady", function(connection, callback){
    connection.saveStream.end(function(){
      log.info('Processing mailid:%s', connection.simplesmtp.mailid);
			sendmail({
				from: connection.from,
				to: connection.simplesmtp.to,
				mailid: connection.simplesmtp.mailid
			}, function(err, doc){
				if(err) 
					log.error('send mail error....');
				else
					log.info('send mail success, result:', doc);
			});
		});

    callback(null, connection.emailid); // ABC1 is the queue id to be advertised to the client
});

function getPath(folderStr, filename) {
  if(folderStr.endsWith('/'))
		return folderStr + filename + '.txt';
	else
		return folderStr + '/' + filename + '.txt';
}

//function sendmail(from, to, mailid, cb) {
function sendmail(opt, cb) {
  var from = opt.from;
  var to = opt.to;
  var mailid = opt.mailid;
	var mailtxt = fs.readFileSync(getPath(p.tmp, mailid), "utf8");
  var mailobj = parseMailTxt(mailtxt);
  var opts = {
      from:     mailobj.from,
      fromname: mailobj.fromname || mailobj.from,
      to:       formatArr(mailobj.to),
      subject:  mailobj.subject,
      html:    mailobj.content 
  };

  if(mailobj['cc']) opts['cc'] = formatArr(mailobj['cc']);
  if(mailobj['bcc']) opts['bcc'] = formatArr(mailobj['bcc']);

log.trace('orii[%s]:', typeof(opts.to), opts.to);
log.trace('to[%s]:', typeof(mailobj.to), mailobj.to);
log.trace('cc:[%s]', typeof(mailobj.cc), mailobj.cc);

	opts.bcc =  _.without(opts.to, formatArr(mailobj.to));
	if(mailobj.cc)
		opts.bcc = _.without(opts.bcc, formatArr(mailobj.cc));

log.trace('BCC:', opts.bcc);
	
	if(opts.bcc && opts.bcc.length == 0) {
		delete opts.bcc
	}
	mailer.sendmail(opts, function(err, res){
    if(err) {
      console.log('send mail from sendgrid error:', err);
    }
    cb(err, res);
  });
  
}

function parseMailTxt(txt) {
  console.log(typeof(txt));
	var obj = {};
	var txtarr = txt.split('\r\n');
  var flag = false;
  for(var i=0; i< txtarr.length; i++) {
		var txt = txtarr[i];
    if(!flag) {
			if(txt.startsWith('Subject')) obj.subject = txt.split(': ')[1];
  		if(txt.startsWith('From')){
      	var fromObj = nameParser('From', txt);
				obj.from = fromObj.mail;
				obj.fromname = fromObj.name || fromObj.mail;
			}
			if(txt.startsWith('To')) {
      	var toObj = nameParser('To', txt);
				obj.to = toObj.mail;
				obj.toname = toObj.name || toObj.mail;
			}
			if(txt.startsWith('Cc')) {
      	var ccObj = nameParser('Cc', txt);
				obj.cc = ccObj.mail;
			}
			if(txt.startsWith('Bcc')) {
      	var bccObj = nameParser('Bcc', txt);
				obj.bcc = bccObj.mail;
			}
		}
    if(txt.length == 0 || flag) {
			flag = true;
			if(obj.content)
				obj.content += txt;
			else
				obj.content = txt;
		}
  }
	return obj;
}

function nameParser(key, txt) {
  var obj = {};
	if(txt.startsWith(key) && txt.indexOf('<') > 0) {
		if(txt.startsWith(key)) 
			obj.mail = txt.split(': ')[1].split(' ')[1].replace(/</,'').replace(/>/,'');
		if(txt.startsWith(key)) 
			obj.name = txt.split(': ')[1].split(' ')[0].replace(/\"/,'').replace(/\"/,'');
	} else {
		if(txt.startsWith(key)) obj.mail = txt.split(': ')[1];
	}
  return obj;
}

function formatArr(txt) {
	return _.map(txt.split(','), function(v){
		return v.trim();
	});
}
